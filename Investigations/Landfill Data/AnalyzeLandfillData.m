function AnalyzeLandfillDataNew
    close all

    locationName = 'Wieringermeer'; % 'Braambergen' 'Wieringermeer'
    
    % Read data
    Leach = TimeSeriesCl(sprintf('data/%sProcessed', locationName));
    Level = TimeSeriesCl(sprintf('data/%sLevelProcessed', locationName));
    Rain  = TimeSeriesCl(sprintf('data/%sMeteoDailyProcessed', locationName));
    
    % Calculate infiltration
    Rain = UpdateNetInfiltration(Rain);
    % Remove non-cumulative data
    Rain = Rain.DeleteCols(2:4);

    % Calculate time aggregated datasets
    timeAggregate = 7;
    LeachDaily = Leach.InterpTime(timeAggregate);
    LevelDaily = Level.InterpTime(LeachDaily.GetTime());
    RainDaily = Rain.InterpTime(LeachDaily.GetTime());
    
    % Get initial time value. For convenience we count days from zero. Thus we need to know
    % initial time
    tBaseLeach = LeachDaily.GetTime(1);
    LeachDaily = LeachDaily.ResetTime();
    LevelDaily = LevelDaily.ResetTime(tBaseLeach);
    RainDaily = RainDaily.ResetTime(tBaseLeach);
    
    % Join datasets
    tic
    CombinedDaily = LeachDaily.Join(LevelDaily);
    CombinedDaily = CombinedDaily.Join(RainDaily);
    toc
    
%     % Usage
%     CombinedDaily.PrintHeaders();
%     figure();
%     CombinedDaily.Plot(6, 'date');
%     figure();
%     CombinedDaily.Plot(5);
    
    CombinedDaily = CombinedDaily.ChangeStartDate(datenum('15-May-2012'));
    CombinedDaily.PrintHeaders();
    
    % Reset first elements of cumulative arrays to zero
    iResetFirstElement = [2, 5, 6, 9:11];
    for i = iResetFirstElement
        CombinedDaily.data(:, i) = CombinedDaily.data(:, i) - CombinedDaily.data(1, i);
    end
    
    CombinedDaily.Plot([5, 6], 'date');
    
    % PrintHeaders(CombinedDaily);
    
%     figure(1);
%     plotyy(CombinedDaily.data(:, 1), CombinedDaily.data(:, [2, 14]), ...
%         CombinedDaily.data(:, 1), CombinedDaily.data(:, 5));
%     figure(2);
%     plot(CombinedDaily.data(:, 1), CombinedDaily.data(:, 7));
    
    %% Trying to estimate area and/or evaporation efficiency
%     % (CombinedDaily.data(:, 2) / 1000) - precipitation in m
%     % CombinedDaily.data(:, 5)          - leachate pumped out
%     areaSampleLow = CombinedDaily.data(20:end, 5) ./ (CombinedDaily.data(20:end, 2) / 1e+3);
%     figure(3)
%     % hist(areaSampleLow, 20);
%     plot(areaSampleLow);
%     areaSampleHi = CombinedDaily.data(20:end, 5) ./ (CombinedDaily.data(20:end, 14) / 1e+3);
%     figure(4)
%     % hist(areaSampleHi, 20);
%     plot(areaSampleHi);
    
    iCell = 2;

    areaEst = 2.3 * 1e+4;   % m^2
    figure();
    plot(CombinedDaily.data(:, 1), CombinedDaily.data(:, 11), 'b');
    hold on;
    plot(CombinedDaily.data(:, 1), CombinedDaily.data(:, 9), 'g');
    plot(CombinedDaily.data(:, 1), CombinedDaily.data(:, 4 + iCell) / (areaEst / 1e+3), 'r');
    % => ~60 days delay
    hold off;

    t = CombinedDaily.data(1:end-1, 1);
    rf = diff(CombinedDaily.data(:, 12));
    evap = diff(CombinedDaily.data(:, 13));
    outflow = diff(CombinedDaily.data(:, 5)); % / (areaEst / 1e+3);
    
    iRain = 11;
    
    %% Analyzing impulse-response (NN)
    iSel = 1:ceil(400 / timeAggregate); % 1:50; % ':';
    
    % Solve an Input-Output Fitting problem with a Neural Network
    % Script generated by NFTOOL
    t = CombinedDaily.data(:, 1);
    inputSeries = num2cell(cat(2, CombinedDaily.data(:, [2, 13]))', 1);
    targetSeries = num2cell(CombinedDaily.data(:, 4 + iCell)');
%     inputSeries = num2cell(cat(2, [0; diff(CombinedDaily.data(:, 2))], ...
%         CombinedDaily.data(:, 10))', 1);
%     targetSeries = num2cell([0; diff(CombinedDaily.data(:, 4 + iCell))]');

    inputDelays = 1:10;
    feedbackDelays = 1:10;
    hiddenLayerSize = [10, 30];
    net = narxnet(inputDelays, feedbackDelays, hiddenLayerSize);

    % Prepare the Data for Training and Simulation
    % The function PREPARETS prepares time series data 
    % for a particular network, shifting time by the minimum 
    % amount to fill input states and layer states.
    % Using PREPARETS allows you to keep your original 
    % time series data unchanged, while easily customizing it 
    % for networks with differing numbers of delays, with
    % open loop or closed loop feedback modes.
    [inputs, inputStates, layerStates, targets] = ... 
        preparets(net, inputSeries, {}, targetSeries);

    % Set up Division of Data for Training, Validation, Testing
    net.divideParam.trainRatio = 90/100;
    net.divideParam.valRatio = 5/100;
    net.divideParam.testRatio = 5/100;

    % Train the Network
    [net, ~] = train(net, inputs(:, iSel), targets(iSel), inputStates, layerStates);

    % Test the Network
    outputs = net(inputs, inputStates, layerStates);

    nntraintool('close');
    
    figure();
    plot(t, cell2mat(targetSeries)', 'g');
    hold on
    plot(t(end-numel(outputs)+1:end), cell2mat(outputs)', 'r');
    hold off
    %% END NN

    return
    
    iSel = ':';
    netInf = CombinedDaily.data(:, iRain);
    netInfTrunc = CombinedDaily.data(iSel, iRain);
    leach = [0; diff(CombinedDaily.data(iSel, 4 + iCell))];
    
%     net = newff([-2 30], [5 1], {'tansig' 'purelin'});
%     leach = sim(net, netInfTrunc);
%     plot(netInfTrunc, netInf, netInfTrunc, leach, 'o')
%     net.trainParam.epochs = 50;
%     net = train(net, netInfTrunc, netInf);
%     leach = sim(net, netInf);
%     plot(netInf, netInfTrunc, netInf, leach, 'o')
    
%     figure();
%     plotyy(CombinedDaily.data(:, 1), cumsum(CombinedDaily.data(:, iRain)), ...
%         CombinedDaily.data(:, 1), CombinedDaily.data(:, 6 + iCell));
%     legend('rain', 'level');
%     figure();
%     plotyy(CombinedDaily.data(:, 1), [CombinedDaily.data(:, iRain + 3), ...
%         CombinedDaily.data(:, 4 + iCell)], CombinedDaily.data(:, 1), CombinedDaily.data(:, 6 + iCell));
%     legend('net infiltration', 'leachate pump', 'leachate level', 'location', 'SouthEast');
    % Interval with constant level
    figure();
    iSel = ':';
    plotyy(CombinedDaily.data(iSel, 1), ...
        NetInfiltration(CombinedDaily.data(iSel, iRain), CombinedDaily.data(iSel, 10), 0.6), ...
        CombinedDaily.data(iSel, 1), [[0; diff(CombinedDaily.data(iSel, 4 + iCell))], ...
        1000 * CombinedDaily.data(:, 6 + iCell)] + 4000);
    title('Rainfall vs. leachate volume (constant level)');
    legend('rain', 'leachate', 'level');
%     figure();
%     plotyy(CombinedDaily.data(iSel, 1), cumsum(CombinedDaily.data(iSel, iRain)), ...
%         CombinedDaily.data(iSel, 1), CombinedDaily.data(iSel, 4 + iCell));
%     title('Rainfall vs. leachate volume (cumulative, constant level)');
%     legend('rain', 'leachate');
%     iSel = 1:size(CombinedDaily.data, 1);
%     figure()
%     plotyy(CombinedDaily.data(iSel, 1), CombinedDaily.data(iSel, iRain), ...
%         CombinedDaily.data(iSel, 1), CombinedDaily.data(iSel, 6 + iCell));
%     title('Rainfall vs. leachate level (pump off)');
%     legend('rain', 'level');
    
    return

    function RainData = UpdateNetInfiltration(RainData)
        alpha = 0.6;
        RainData.data(:, 4) = NetInfiltration(RainData.data(:, 2), ...
            RainData.data(:, 3), alpha);
        RainData.data(:, 7) = cumsum(RainData.data(:, 4));
    end
end