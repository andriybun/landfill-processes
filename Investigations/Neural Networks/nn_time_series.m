% Solve an Autoregression Problem with External 
% Input with a NARX Neural Network
% Script generated by NTSTOOL
%
% This script assumes the variables on the right of 
% these equalities are defined:
%
%   phInputs - input time series.
%   phTargets - feedback time series.

clear
close all

sel = 1:1000;

dataset = load('../Transforms/mat/CaseStudy_Real_Rain_Data.mat');
t = dataset.t;
inputSeries = num2cell(1e+3 * dataset.fluxIn);
targetSeries = num2cell(-1e+3 * dataset.fluxOut);

% load ph_dataset;
% inputSeries = phInputs;
% targetSeries = phTargets;

% Create a Nonlinear Autoregressive Network with External Input
inputDelays = 1:10;
feedbackDelays = 1:10;
hiddenLayerSize = [10];
net = narxnet(inputDelays, feedbackDelays, hiddenLayerSize);

% Prepare the Data for Training and Simulation
% The function PREPARETS prepares time series data 
% for a particular network, shifting time by the minimum 
% amount to fill input states and layer states.
% Using PREPARETS allows you to keep your original 
% time series data unchanged, while easily customizing it 
% for networks with differing numbers of delays, with
% open loop or closed loop feedback modes.
[inputs, inputStates, layerStates, targets] = ... 
    preparets(net, inputSeries, {}, targetSeries);
 
% Set up Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net, inputs(:, sel), targets(sel), inputStates, layerStates);

% Test the Network
outputs = net(inputs, inputStates, layerStates);

plot(cell2mat(targetSeries), 'g')
hold on
plot(cell2mat(outputs), 'r')
hold off

% errors = gsubtract(targets,outputs);
% performance = perform(net,targets,outputs);

% % View the Network
% view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, plotregression(targets,outputs)
% figure, plotresponse(targets,outputs)
%figure, ploterrcorr(errors)
%figure, plotinerrcorr(inputs,errors)

% % Closed Loop Network
% % Use this network to do multi-step prediction.
% % The function CLOSELOOP replaces the feedback input with a direct
% % connection from the outout layer.
% netc = closeloop(net);
% netc.name = [net.name ' - Closed Loop'];
% view(netc)
% [xc,xic,aic,tc] = preparets(netc,inputSeries,{},targetSeries);
% yc = netc(xc,xic,aic);
% closedLoopPerformance = perform(netc,tc,yc)
% 
% % Early Prediction Network
% % For some applications it helps to get the prediction a 
% % timestep early.
% % The original network returns predicted y(t+1) at the same 
% % time it is given y(t+1).
% % For some applications such as decision making, it would 
% % help to have predicted y(t+1) once y(t) is available, but 
% % before the actual y(t+1) occurs.
% % The network can be made to return its output a timestep early 
% % by removing one delay so that its minimal tap delay is now 
% % 0 instead of 1.  The new network returns the same outputs as 
% % the original network, but outputs are shifted left one timestep.
% nets = removedelay(net);
% nets.name = [net.name ' - Predict One Step Ahead'];
% view(nets)
% [xs,xis,ais,ts] = preparets(nets,inputSeries,{},targetSeries);
% ys = nets(xs,xis,ais);
% earlyPredictPerformance = perform(nets,ts,ys);
